/*
JumpCloud API

Testing SystemsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package jcapi1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/ConductorOne/baton-jumpcloud/pkg/jcapi1"
)

func Test_jcapi1_SystemsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SystemsApiService SystemsCommandBuiltinErase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		httpRes, err := apiClient.SystemsApi.SystemsCommandBuiltinErase(context.Background(), systemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemsApiService SystemsCommandBuiltinLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		httpRes, err := apiClient.SystemsApi.SystemsCommandBuiltinLock(context.Background(), systemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemsApiService SystemsCommandBuiltinRestart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		httpRes, err := apiClient.SystemsApi.SystemsCommandBuiltinRestart(context.Background(), systemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemsApiService SystemsCommandBuiltinShutdown", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		httpRes, err := apiClient.SystemsApi.SystemsCommandBuiltinShutdown(context.Background(), systemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemsApiService SystemsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.SystemsApi.SystemsDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemsApiService SystemsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.SystemsApi.SystemsGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemsApiService SystemsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SystemsApi.SystemsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemsApiService SystemsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.SystemsApi.SystemsPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
