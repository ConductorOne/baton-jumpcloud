/*
JumpCloud API

Testing AppleMDMApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_AppleMDMApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AppleMDMApiService ApplemdmsCsrget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string

		resp, httpRes, err := apiClient.AppleMDMApi.ApplemdmsCsrget(context.Background(), appleMdmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.AppleMDMApi.ApplemdmsDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsDeletedevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string
		var deviceId string

		resp, httpRes, err := apiClient.AppleMDMApi.ApplemdmsDeletedevice(context.Background(), appleMdmId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsDepkeyget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string

		resp, httpRes, err := apiClient.AppleMDMApi.ApplemdmsDepkeyget(context.Background(), appleMdmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsDevicesClearActivationLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string
		var deviceId string

		httpRes, err := apiClient.AppleMDMApi.ApplemdmsDevicesClearActivationLock(context.Background(), appleMdmId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsDevicesOSUpdateStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string
		var deviceId string

		httpRes, err := apiClient.AppleMDMApi.ApplemdmsDevicesOSUpdateStatus(context.Background(), appleMdmId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsDevicesRefreshActivationLockInformation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string
		var deviceId string

		httpRes, err := apiClient.AppleMDMApi.ApplemdmsDevicesRefreshActivationLockInformation(context.Background(), appleMdmId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsDevicesScheduleOSUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string
		var deviceId string

		httpRes, err := apiClient.AppleMDMApi.ApplemdmsDevicesScheduleOSUpdate(context.Background(), appleMdmId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsDeviceserase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string
		var deviceId string

		httpRes, err := apiClient.AppleMDMApi.ApplemdmsDeviceserase(context.Background(), appleMdmId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsDeviceslist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string

		resp, httpRes, err := apiClient.AppleMDMApi.ApplemdmsDeviceslist(context.Background(), appleMdmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsDeviceslock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string
		var deviceId string

		httpRes, err := apiClient.AppleMDMApi.ApplemdmsDeviceslock(context.Background(), appleMdmId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsDevicesrestart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string
		var deviceId string

		httpRes, err := apiClient.AppleMDMApi.ApplemdmsDevicesrestart(context.Background(), appleMdmId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsDevicesshutdown", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string
		var deviceId string

		httpRes, err := apiClient.AppleMDMApi.ApplemdmsDevicesshutdown(context.Background(), appleMdmId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsEnrollmentprofilesget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string
		var id string

		resp, httpRes, err := apiClient.AppleMDMApi.ApplemdmsEnrollmentprofilesget(context.Background(), appleMdmId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsEnrollmentprofileslist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string

		resp, httpRes, err := apiClient.AppleMDMApi.ApplemdmsEnrollmentprofileslist(context.Background(), appleMdmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsGetdevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string
		var deviceId string

		resp, httpRes, err := apiClient.AppleMDMApi.ApplemdmsGetdevice(context.Background(), appleMdmId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AppleMDMApi.ApplemdmsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.AppleMDMApi.ApplemdmsPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppleMDMApiService ApplemdmsRefreshdepdevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appleMdmId string

		httpRes, err := apiClient.AppleMDMApi.ApplemdmsRefreshdepdevices(context.Background(), appleMdmId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
