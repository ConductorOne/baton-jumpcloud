/*
JumpCloud API

Testing SoftwareAppsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package github.com/ConductorOne/baton-jumpcloud/pkg/jcapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/github.com/ConductorOne/baton-jumpcloud/pkg/jcapi"
)

func Test_github.com/ConductorOne/baton-jumpcloud/pkg/jcapi_SoftwareAppsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SoftwareAppsApiService GraphSoftwareappsAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var softwareAppId string

		resp, httpRes, err := apiClient.SoftwareAppsApi.GraphSoftwareappsAssociationsList(context.Background(), softwareAppId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SoftwareAppsApiService GraphSoftwareappsAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var softwareAppId string

		httpRes, err := apiClient.SoftwareAppsApi.GraphSoftwareappsAssociationsPost(context.Background(), softwareAppId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SoftwareAppsApiService GraphSoftwareappsTraverseSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var softwareAppId string

		resp, httpRes, err := apiClient.SoftwareAppsApi.GraphSoftwareappsTraverseSystem(context.Background(), softwareAppId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SoftwareAppsApiService GraphSoftwareappsTraverseSystemGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var softwareAppId string

		resp, httpRes, err := apiClient.SoftwareAppsApi.GraphSoftwareappsTraverseSystemGroup(context.Background(), softwareAppId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SoftwareAppsApiService SoftwareAppStatusesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var softwareAppId string

		resp, httpRes, err := apiClient.SoftwareAppsApi.SoftwareAppStatusesList(context.Background(), softwareAppId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SoftwareAppsApiService SoftwareAppsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.SoftwareAppsApi.SoftwareAppsDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SoftwareAppsApiService SoftwareAppsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.SoftwareAppsApi.SoftwareAppsGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SoftwareAppsApiService SoftwareAppsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SoftwareAppsApi.SoftwareAppsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SoftwareAppsApiService SoftwareAppsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SoftwareAppsApi.SoftwareAppsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SoftwareAppsApiService SoftwareAppsReclaimLicenses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var softwareAppId string

		resp, httpRes, err := apiClient.SoftwareAppsApi.SoftwareAppsReclaimLicenses(context.Background(), softwareAppId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SoftwareAppsApiService SoftwareAppsRetryInstallation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var softwareAppId string

		httpRes, err := apiClient.SoftwareAppsApi.SoftwareAppsRetryInstallation(context.Background(), softwareAppId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SoftwareAppsApiService SoftwareAppsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.SoftwareAppsApi.SoftwareAppsUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
