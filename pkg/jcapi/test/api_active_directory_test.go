/*
JumpCloud API

Testing ActiveDirectoryApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package jcapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/ConductorOne/baton-jumpcloud/pkg/jcapi"
)

func Test_jcapi_ActiveDirectoryApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ActiveDirectoryApiService ActivedirectoriesAgentsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activedirectoryId string
		var agentId string

		httpRes, err := apiClient.ActiveDirectoryApi.ActivedirectoriesAgentsDelete(context.Background(), activedirectoryId, agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActiveDirectoryApiService ActivedirectoriesAgentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activedirectoryId string
		var agentId string

		resp, httpRes, err := apiClient.ActiveDirectoryApi.ActivedirectoriesAgentsGet(context.Background(), activedirectoryId, agentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActiveDirectoryApiService ActivedirectoriesAgentsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activedirectoryId string

		resp, httpRes, err := apiClient.ActiveDirectoryApi.ActivedirectoriesAgentsList(context.Background(), activedirectoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActiveDirectoryApiService ActivedirectoriesAgentsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activedirectoryId string

		resp, httpRes, err := apiClient.ActiveDirectoryApi.ActivedirectoriesAgentsPost(context.Background(), activedirectoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActiveDirectoryApiService ActivedirectoriesDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ActiveDirectoryApi.ActivedirectoriesDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActiveDirectoryApiService ActivedirectoriesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ActiveDirectoryApi.ActivedirectoriesGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActiveDirectoryApiService ActivedirectoriesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActiveDirectoryApi.ActivedirectoriesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActiveDirectoryApiService ActivedirectoriesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActiveDirectoryApi.ActivedirectoriesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActiveDirectoryApiService GraphActiveDirectoryAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activedirectoryId string

		resp, httpRes, err := apiClient.ActiveDirectoryApi.GraphActiveDirectoryAssociationsList(context.Background(), activedirectoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActiveDirectoryApiService GraphActiveDirectoryAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activedirectoryId string

		httpRes, err := apiClient.ActiveDirectoryApi.GraphActiveDirectoryAssociationsPost(context.Background(), activedirectoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActiveDirectoryApiService GraphActiveDirectoryTraverseUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activedirectoryId string

		resp, httpRes, err := apiClient.ActiveDirectoryApi.GraphActiveDirectoryTraverseUser(context.Background(), activedirectoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActiveDirectoryApiService GraphActiveDirectoryTraverseUserGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activedirectoryId string

		resp, httpRes, err := apiClient.ActiveDirectoryApi.GraphActiveDirectoryTraverseUserGroup(context.Background(), activedirectoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
