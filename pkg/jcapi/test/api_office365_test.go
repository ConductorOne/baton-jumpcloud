/*
JumpCloud API

Testing Office365ApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package jcapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/ConductorOne/baton-jumpcloud/pkg/jcapi"
)

func Test_jcapi_Office365ApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test Office365ApiService GraphOffice365AssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var office365Id string

		resp, httpRes, err := apiClient.Office365Api.GraphOffice365AssociationsList(context.Background(), office365Id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Office365ApiService GraphOffice365AssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var office365Id string

		httpRes, err := apiClient.Office365Api.GraphOffice365AssociationsPost(context.Background(), office365Id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Office365ApiService GraphOffice365TraverseUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var office365Id string

		resp, httpRes, err := apiClient.Office365Api.GraphOffice365TraverseUser(context.Background(), office365Id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Office365ApiService GraphOffice365TraverseUserGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var office365Id string

		resp, httpRes, err := apiClient.Office365Api.GraphOffice365TraverseUserGroup(context.Background(), office365Id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Office365ApiService Office365sGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var office365Id string

		resp, httpRes, err := apiClient.Office365Api.Office365sGet(context.Background(), office365Id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Office365ApiService Office365sListImportUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var office365Id string

		resp, httpRes, err := apiClient.Office365Api.Office365sListImportUsers(context.Background(), office365Id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Office365ApiService Office365sPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var office365Id string

		resp, httpRes, err := apiClient.Office365Api.Office365sPatch(context.Background(), office365Id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Office365ApiService TranslationRulesOffice365Delete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var office365Id string
		var id string

		httpRes, err := apiClient.Office365Api.TranslationRulesOffice365Delete(context.Background(), office365Id, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Office365ApiService TranslationRulesOffice365Get", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var office365Id string
		var id string

		resp, httpRes, err := apiClient.Office365Api.TranslationRulesOffice365Get(context.Background(), office365Id, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Office365ApiService TranslationRulesOffice365List", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var office365Id string

		resp, httpRes, err := apiClient.Office365Api.TranslationRulesOffice365List(context.Background(), office365Id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Office365ApiService TranslationRulesOffice365Post", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var office365Id string

		resp, httpRes, err := apiClient.Office365Api.TranslationRulesOffice365Post(context.Background(), office365Id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
