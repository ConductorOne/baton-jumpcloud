/*
JumpCloud API

Testing WorkdayImportApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package jcapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/ConductorOne/baton-jumpcloud/pkg/jcapi"
)

func Test_jcapi_WorkdayImportApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WorkdayImportApiService WorkdaysAuthorize", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workdayId string

		httpRes, err := apiClient.WorkdayImportApi.WorkdaysAuthorize(context.Background(), workdayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkdayImportApiService WorkdaysDeauthorize", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workdayId string

		httpRes, err := apiClient.WorkdayImportApi.WorkdaysDeauthorize(context.Background(), workdayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkdayImportApiService WorkdaysGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.WorkdayImportApi.WorkdaysGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkdayImportApiService WorkdaysImport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workdayId string

		resp, httpRes, err := apiClient.WorkdayImportApi.WorkdaysImport(context.Background(), workdayId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkdayImportApiService WorkdaysImportresults", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var jobId string

		resp, httpRes, err := apiClient.WorkdayImportApi.WorkdaysImportresults(context.Background(), id, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkdayImportApiService WorkdaysList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WorkdayImportApi.WorkdaysList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkdayImportApiService WorkdaysPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WorkdayImportApi.WorkdaysPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkdayImportApiService WorkdaysPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.WorkdayImportApi.WorkdaysPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkdayImportApiService WorkdaysWorkers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workdayId string

		resp, httpRes, err := apiClient.WorkdayImportApi.WorkdaysWorkers(context.Background(), workdayId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
