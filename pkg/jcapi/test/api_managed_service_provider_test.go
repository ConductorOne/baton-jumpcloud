/*
JumpCloud API

Testing ManagedServiceProviderApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package github.com/ConductorOne/baton-jumpcloud/pkg/jcapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/github.com/ConductorOne/baton-jumpcloud/pkg/jcapi"
)

func Test_github.com/ConductorOne/baton-jumpcloud/pkg/jcapi_ManagedServiceProviderApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ManagedServiceProviderApiService AdministratorOrganizationsCreateByAdministrator", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.AdministratorOrganizationsCreateByAdministrator(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService AdministratorOrganizationsListByAdministrator", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.AdministratorOrganizationsListByAdministrator(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService AdministratorOrganizationsListByOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.AdministratorOrganizationsListByOrganization(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService AdministratorOrganizationsRemoveByAdministrator", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var administratorId string
		var id string

		httpRes, err := apiClient.ManagedServiceProviderApi.AdministratorOrganizationsRemoveByAdministrator(context.Background(), administratorId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService PolicyGroupTemplatesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string
		var id string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.PolicyGroupTemplatesGet(context.Background(), providerId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService PolicyGroupTemplatesGetConfiguredPolicyTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string
		var id string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.PolicyGroupTemplatesGetConfiguredPolicyTemplate(context.Background(), providerId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService PolicyGroupTemplatesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.PolicyGroupTemplatesList(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService PolicyGroupTemplatesListConfiguredPolicyTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.PolicyGroupTemplatesListConfiguredPolicyTemplates(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService PolicyGroupTemplatesListMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string
		var id string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.PolicyGroupTemplatesListMembers(context.Background(), providerId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService ProviderOrganizationsCreateOrg", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.ProviderOrganizationsCreateOrg(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService ProviderOrganizationsUpdateOrg", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string
		var id string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.ProviderOrganizationsUpdateOrg(context.Background(), providerId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService ProvidersGetProvider", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.ProvidersGetProvider(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService ProvidersListAdministrators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.ProvidersListAdministrators(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService ProvidersListOrganizations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.ProvidersListOrganizations(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService ProvidersPostAdmins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.ProvidersPostAdmins(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService ProvidersRetrieveInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string
		var iD string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.ProvidersRetrieveInvoice(context.Background(), providerId, iD).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedServiceProviderApiService ProvidersRetrieveInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ManagedServiceProviderApi.ProvidersRetrieveInvoices(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
