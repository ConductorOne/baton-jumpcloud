/*
JumpCloud API

Testing GSuiteApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package jcapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/ConductorOne/baton-jumpcloud/pkg/jcapi"
)

func Test_jcapi_GSuiteApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GSuiteApiService GraphGSuiteAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gsuiteId string

		resp, httpRes, err := apiClient.GSuiteApi.GraphGSuiteAssociationsList(context.Background(), gsuiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GSuiteApiService GraphGSuiteAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gsuiteId string

		httpRes, err := apiClient.GSuiteApi.GraphGSuiteAssociationsPost(context.Background(), gsuiteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GSuiteApiService GraphGSuiteTraverseUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gsuiteId string

		resp, httpRes, err := apiClient.GSuiteApi.GraphGSuiteTraverseUser(context.Background(), gsuiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GSuiteApiService GraphGSuiteTraverseUserGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gsuiteId string

		resp, httpRes, err := apiClient.GSuiteApi.GraphGSuiteTraverseUserGroup(context.Background(), gsuiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GSuiteApiService GsuitesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.GSuiteApi.GsuitesGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GSuiteApiService GsuitesListImportJumpcloudUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gsuiteId string

		resp, httpRes, err := apiClient.GSuiteApi.GsuitesListImportJumpcloudUsers(context.Background(), gsuiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GSuiteApiService GsuitesListImportUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gsuiteId string

		resp, httpRes, err := apiClient.GSuiteApi.GsuitesListImportUsers(context.Background(), gsuiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GSuiteApiService GsuitesPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.GSuiteApi.GsuitesPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GSuiteApiService TranslationRulesGSuiteDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gsuiteId string
		var id string

		httpRes, err := apiClient.GSuiteApi.TranslationRulesGSuiteDelete(context.Background(), gsuiteId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GSuiteApiService TranslationRulesGSuiteGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gsuiteId string
		var id string

		resp, httpRes, err := apiClient.GSuiteApi.TranslationRulesGSuiteGet(context.Background(), gsuiteId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GSuiteApiService TranslationRulesGSuiteList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gsuiteId string

		resp, httpRes, err := apiClient.GSuiteApi.TranslationRulesGSuiteList(context.Background(), gsuiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GSuiteApiService TranslationRulesGSuitePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gsuiteId string

		resp, httpRes, err := apiClient.GSuiteApi.TranslationRulesGSuitePost(context.Background(), gsuiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
