/*
JumpCloud API

Testing LDAPServersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package jcapi2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/conductorone/baton-jumpcloud/pkg/jcapi2"
)

func Test_jcapi2_LDAPServersApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LDAPServersApiService GraphLdapServerAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ldapserverId string

		resp, httpRes, err := apiClient.LDAPServersApi.GraphLdapServerAssociationsList(context.Background(), ldapserverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LDAPServersApiService GraphLdapServerAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ldapserverId string

		httpRes, err := apiClient.LDAPServersApi.GraphLdapServerAssociationsPost(context.Background(), ldapserverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LDAPServersApiService GraphLdapServerTraverseUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ldapserverId string

		resp, httpRes, err := apiClient.LDAPServersApi.GraphLdapServerTraverseUser(context.Background(), ldapserverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LDAPServersApiService GraphLdapServerTraverseUserGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ldapserverId string

		resp, httpRes, err := apiClient.LDAPServersApi.GraphLdapServerTraverseUserGroup(context.Background(), ldapserverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LDAPServersApiService LdapserversGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.LDAPServersApi.LdapserversGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LDAPServersApiService LdapserversList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LDAPServersApi.LdapserversList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LDAPServersApiService LdapserversPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.LDAPServersApi.LdapserversPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
