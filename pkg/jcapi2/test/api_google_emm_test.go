/*
JumpCloud API

Testing GoogleEMMApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package jcapi2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/conductorone/baton-jumpcloud/pkg/jcapi2"
)

func Test_jcapi2_GoogleEMMApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GoogleEMMApiService DevicesGetDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.GoogleEMMApi.DevicesGetDevice(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoogleEMMApiService DevicesGetDeviceAndroidPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.GoogleEMMApi.DevicesGetDeviceAndroidPolicy(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoogleEMMApiService DevicesLockDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.GoogleEMMApi.DevicesLockDevice(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoogleEMMApiService DevicesRelinquishOwnership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.GoogleEMMApi.DevicesRelinquishOwnership(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoogleEMMApiService DevicesResetPassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.GoogleEMMApi.DevicesResetPassword(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoogleEMMApiService EnterprisesCreateEnterprise", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GoogleEMMApi.EnterprisesCreateEnterprise(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoogleEMMApiService EnterprisesDeleteEnterprise", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var enterpriseId string

		resp, httpRes, err := apiClient.GoogleEMMApi.EnterprisesDeleteEnterprise(context.Background(), enterpriseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoogleEMMApiService EnterprisesGetConnectionStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var enterpriseId string

		resp, httpRes, err := apiClient.GoogleEMMApi.EnterprisesGetConnectionStatus(context.Background(), enterpriseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoogleEMMApiService EnterprisesListEnterprises", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GoogleEMMApi.EnterprisesListEnterprises(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoogleEMMApiService EnterprisesPatchEnterprise", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var enterpriseId string

		resp, httpRes, err := apiClient.GoogleEMMApi.EnterprisesPatchEnterprise(context.Background(), enterpriseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoogleEMMApiService SignupURLsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GoogleEMMApi.SignupURLsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoogleEMMApiService WebTokensCreateWebToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GoogleEMMApi.WebTokensCreateWebToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
