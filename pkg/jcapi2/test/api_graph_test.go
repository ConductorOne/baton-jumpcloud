/*
JumpCloud API

Testing GraphApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package jcapi2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/ConductorOne/baton-jumpcloud/pkg/jcapi2"
)

func Test_jcapi2_GraphApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GraphApiService GraphActiveDirectoryAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activedirectoryId string

		resp, httpRes, err := apiClient.GraphApi.GraphActiveDirectoryAssociationsList(context.Background(), activedirectoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphActiveDirectoryAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activedirectoryId string

		httpRes, err := apiClient.GraphApi.GraphActiveDirectoryAssociationsPost(context.Background(), activedirectoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphActiveDirectoryTraverseUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activedirectoryId string

		resp, httpRes, err := apiClient.GraphApi.GraphActiveDirectoryTraverseUser(context.Background(), activedirectoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphActiveDirectoryTraverseUserGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activedirectoryId string

		resp, httpRes, err := apiClient.GraphApi.GraphActiveDirectoryTraverseUserGroup(context.Background(), activedirectoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphApplicationAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.GraphApi.GraphApplicationAssociationsList(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphApplicationAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		httpRes, err := apiClient.GraphApi.GraphApplicationAssociationsPost(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphApplicationTraverseUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.GraphApi.GraphApplicationTraverseUser(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphApplicationTraverseUserGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.GraphApi.GraphApplicationTraverseUserGroup(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphCommandAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var commandId string

		resp, httpRes, err := apiClient.GraphApi.GraphCommandAssociationsList(context.Background(), commandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphCommandAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var commandId string

		httpRes, err := apiClient.GraphApi.GraphCommandAssociationsPost(context.Background(), commandId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphCommandTraverseSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var commandId string

		resp, httpRes, err := apiClient.GraphApi.GraphCommandTraverseSystem(context.Background(), commandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphCommandTraverseSystemGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var commandId string

		resp, httpRes, err := apiClient.GraphApi.GraphCommandTraverseSystemGroup(context.Background(), commandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphGSuiteAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gsuiteId string

		resp, httpRes, err := apiClient.GraphApi.GraphGSuiteAssociationsList(context.Background(), gsuiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphGSuiteAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gsuiteId string

		httpRes, err := apiClient.GraphApi.GraphGSuiteAssociationsPost(context.Background(), gsuiteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphGSuiteTraverseUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gsuiteId string

		resp, httpRes, err := apiClient.GraphApi.GraphGSuiteTraverseUser(context.Background(), gsuiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphGSuiteTraverseUserGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gsuiteId string

		resp, httpRes, err := apiClient.GraphApi.GraphGSuiteTraverseUserGroup(context.Background(), gsuiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphLdapServerAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ldapserverId string

		resp, httpRes, err := apiClient.GraphApi.GraphLdapServerAssociationsList(context.Background(), ldapserverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphLdapServerAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ldapserverId string

		httpRes, err := apiClient.GraphApi.GraphLdapServerAssociationsPost(context.Background(), ldapserverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphLdapServerTraverseUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ldapserverId string

		resp, httpRes, err := apiClient.GraphApi.GraphLdapServerTraverseUser(context.Background(), ldapserverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphLdapServerTraverseUserGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ldapserverId string

		resp, httpRes, err := apiClient.GraphApi.GraphLdapServerTraverseUserGroup(context.Background(), ldapserverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphOffice365AssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var office365Id string

		resp, httpRes, err := apiClient.GraphApi.GraphOffice365AssociationsList(context.Background(), office365Id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphOffice365AssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var office365Id string

		httpRes, err := apiClient.GraphApi.GraphOffice365AssociationsPost(context.Background(), office365Id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphOffice365TraverseUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var office365Id string

		resp, httpRes, err := apiClient.GraphApi.GraphOffice365TraverseUser(context.Background(), office365Id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphOffice365TraverseUserGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var office365Id string

		resp, httpRes, err := apiClient.GraphApi.GraphOffice365TraverseUserGroup(context.Background(), office365Id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphPolicyAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyId string

		resp, httpRes, err := apiClient.GraphApi.GraphPolicyAssociationsList(context.Background(), policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphPolicyAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyId string

		httpRes, err := apiClient.GraphApi.GraphPolicyAssociationsPost(context.Background(), policyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphPolicyGroupAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphPolicyGroupAssociationsList(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphPolicyGroupAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		httpRes, err := apiClient.GraphApi.GraphPolicyGroupAssociationsPost(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphPolicyGroupMembersList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphPolicyGroupMembersList(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphPolicyGroupMembersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		httpRes, err := apiClient.GraphApi.GraphPolicyGroupMembersPost(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphPolicyGroupMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphPolicyGroupMembership(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphPolicyGroupTraverseSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphPolicyGroupTraverseSystem(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphPolicyGroupTraverseSystemGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphPolicyGroupTraverseSystemGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphPolicyMemberOf", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyId string

		resp, httpRes, err := apiClient.GraphApi.GraphPolicyMemberOf(context.Background(), policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphPolicyTraverseSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyId string

		resp, httpRes, err := apiClient.GraphApi.GraphPolicyTraverseSystem(context.Background(), policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphPolicyTraverseSystemGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyId string

		resp, httpRes, err := apiClient.GraphApi.GraphPolicyTraverseSystemGroup(context.Background(), policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphRadiusServerAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var radiusserverId string

		resp, httpRes, err := apiClient.GraphApi.GraphRadiusServerAssociationsList(context.Background(), radiusserverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphRadiusServerAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var radiusserverId string

		httpRes, err := apiClient.GraphApi.GraphRadiusServerAssociationsPost(context.Background(), radiusserverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphRadiusServerTraverseUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var radiusserverId string

		resp, httpRes, err := apiClient.GraphApi.GraphRadiusServerTraverseUser(context.Background(), radiusserverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphRadiusServerTraverseUserGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var radiusserverId string

		resp, httpRes, err := apiClient.GraphApi.GraphRadiusServerTraverseUserGroup(context.Background(), radiusserverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSoftwareappsAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var softwareAppId string

		resp, httpRes, err := apiClient.GraphApi.GraphSoftwareappsAssociationsList(context.Background(), softwareAppId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSoftwareappsAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var softwareAppId string

		httpRes, err := apiClient.GraphApi.GraphSoftwareappsAssociationsPost(context.Background(), softwareAppId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSoftwareappsTraverseSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var softwareAppId string

		resp, httpRes, err := apiClient.GraphApi.GraphSoftwareappsTraverseSystem(context.Background(), softwareAppId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSoftwareappsTraverseSystemGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var softwareAppId string

		resp, httpRes, err := apiClient.GraphApi.GraphSoftwareappsTraverseSystemGroup(context.Background(), softwareAppId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.GraphApi.GraphSystemAssociationsList(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		httpRes, err := apiClient.GraphApi.GraphSystemAssociationsPost(context.Background(), systemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemGroupAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphSystemGroupAssociationsList(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemGroupAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		httpRes, err := apiClient.GraphApi.GraphSystemGroupAssociationsPost(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemGroupMembersList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphSystemGroupMembersList(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemGroupMembersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		httpRes, err := apiClient.GraphApi.GraphSystemGroupMembersPost(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemGroupMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphSystemGroupMembership(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemGroupTraverseCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphSystemGroupTraverseCommand(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemGroupTraversePolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphSystemGroupTraversePolicy(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemGroupTraversePolicyGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphSystemGroupTraversePolicyGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemGroupTraverseUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphSystemGroupTraverseUser(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemGroupTraverseUserGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphSystemGroupTraverseUserGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemMemberOf", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.GraphApi.GraphSystemMemberOf(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemTraverseCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.GraphApi.GraphSystemTraverseCommand(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemTraversePolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.GraphApi.GraphSystemTraversePolicy(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemTraversePolicyGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.GraphApi.GraphSystemTraversePolicyGroup(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemTraverseUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.GraphApi.GraphSystemTraverseUser(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphSystemTraverseUserGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.GraphApi.GraphSystemTraverseUserGroup(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserAssociationsList(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		httpRes, err := apiClient.GraphApi.GraphUserAssociationsPost(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserGroupAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserGroupAssociationsList(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserGroupAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		httpRes, err := apiClient.GraphApi.GraphUserGroupAssociationsPost(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserGroupMembersList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserGroupMembersList(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserGroupMembersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		httpRes, err := apiClient.GraphApi.GraphUserGroupMembersPost(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserGroupMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserGroupMembership(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserGroupTraverseActiveDirectory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserGroupTraverseActiveDirectory(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserGroupTraverseApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserGroupTraverseApplication(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserGroupTraverseDirectory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserGroupTraverseDirectory(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserGroupTraverseGSuite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserGroupTraverseGSuite(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserGroupTraverseLdapServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserGroupTraverseLdapServer(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserGroupTraverseOffice365", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserGroupTraverseOffice365(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserGroupTraverseRadiusServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserGroupTraverseRadiusServer(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserGroupTraverseSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserGroupTraverseSystem(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserGroupTraverseSystemGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserGroupTraverseSystemGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserMemberOf", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserMemberOf(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserTraverseActiveDirectory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserTraverseActiveDirectory(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserTraverseApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserTraverseApplication(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserTraverseDirectory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserTraverseDirectory(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserTraverseGSuite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserTraverseGSuite(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserTraverseLdapServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserTraverseLdapServer(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserTraverseOffice365", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserTraverseOffice365(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserTraverseRadiusServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserTraverseRadiusServer(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserTraverseSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserTraverseSystem(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService GraphUserTraverseSystemGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.GraphApi.GraphUserTraverseSystemGroup(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GraphApiService PolicystatusesSystemsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemId string

		resp, httpRes, err := apiClient.GraphApi.PolicystatusesSystemsList(context.Background(), systemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
