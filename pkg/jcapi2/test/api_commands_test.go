/*
JumpCloud API

Testing CommandsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package jcapi2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/ConductorOne/baton-jumpcloud/pkg/jcapi2"
)

func Test_jcapi2_CommandsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CommandsApiService CommandsCancelQueuedCommandsByWorkflowInstanceId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowInstanceId string

		httpRes, err := apiClient.CommandsApi.CommandsCancelQueuedCommandsByWorkflowInstanceId(context.Background(), workflowInstanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommandsApiService CommandsGetQueuedCommandsByWorkflow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CommandsApi.CommandsGetQueuedCommandsByWorkflow(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommandsApiService GraphCommandAssociationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var commandId string

		resp, httpRes, err := apiClient.CommandsApi.GraphCommandAssociationsList(context.Background(), commandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommandsApiService GraphCommandAssociationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var commandId string

		httpRes, err := apiClient.CommandsApi.GraphCommandAssociationsPost(context.Background(), commandId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommandsApiService GraphCommandTraverseSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var commandId string

		resp, httpRes, err := apiClient.CommandsApi.GraphCommandTraverseSystem(context.Background(), commandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CommandsApiService GraphCommandTraverseSystemGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var commandId string

		resp, httpRes, err := apiClient.CommandsApi.GraphCommandTraverseSystemGroup(context.Background(), commandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
