/*
JumpCloud API

Testing ProvidersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package jcapi2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/ConductorOne/baton-jumpcloud/pkg/jcapi2"
)

func Test_jcapi2_ProvidersApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProvidersApiService AutotaskCreateConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.AutotaskCreateConfiguration(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService AutotaskDeleteConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		httpRes, err := apiClient.ProvidersApi.AutotaskDeleteConfiguration(context.Background(), uUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService AutotaskGetConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.AutotaskGetConfiguration(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService AutotaskPatchMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.AutotaskPatchMappings(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService AutotaskPatchSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.AutotaskPatchSettings(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService AutotaskRetrieveAllAlertConfigurationOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.AutotaskRetrieveAllAlertConfigurationOptions(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService AutotaskRetrieveAllAlertConfigurations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.AutotaskRetrieveAllAlertConfigurations(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService AutotaskRetrieveCompanies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.AutotaskRetrieveCompanies(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService AutotaskRetrieveCompanyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.AutotaskRetrieveCompanyTypes(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService AutotaskRetrieveContracts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.AutotaskRetrieveContracts(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService AutotaskRetrieveContractsFields", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.AutotaskRetrieveContractsFields(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService AutotaskRetrieveMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.AutotaskRetrieveMappings(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService AutotaskRetrieveServices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.AutotaskRetrieveServices(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService AutotaskRetrieveSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.AutotaskRetrieveSettings(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService AutotaskUpdateAlertConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string
		var alertUUID string

		resp, httpRes, err := apiClient.ProvidersApi.AutotaskUpdateAlertConfiguration(context.Background(), providerId, alertUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService AutotaskUpdateConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.AutotaskUpdateConfiguration(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ConnectwiseCreateConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.ConnectwiseCreateConfiguration(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ConnectwiseDeleteConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		httpRes, err := apiClient.ProvidersApi.ConnectwiseDeleteConfiguration(context.Background(), uUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ConnectwiseGetConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.ConnectwiseGetConfiguration(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ConnectwisePatchMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.ConnectwisePatchMappings(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ConnectwisePatchSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.ConnectwisePatchSettings(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ConnectwiseRetrieveAdditions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string
		var agreementID string

		resp, httpRes, err := apiClient.ProvidersApi.ConnectwiseRetrieveAdditions(context.Background(), uUID, agreementID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ConnectwiseRetrieveAgreements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.ConnectwiseRetrieveAgreements(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ConnectwiseRetrieveAllAlertConfigurationOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.ConnectwiseRetrieveAllAlertConfigurationOptions(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ConnectwiseRetrieveAllAlertConfigurations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.ConnectwiseRetrieveAllAlertConfigurations(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ConnectwiseRetrieveCompanies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.ConnectwiseRetrieveCompanies(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ConnectwiseRetrieveCompanyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.ConnectwiseRetrieveCompanyTypes(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ConnectwiseRetrieveMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.ConnectwiseRetrieveMappings(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ConnectwiseRetrieveSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.ConnectwiseRetrieveSettings(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ConnectwiseUpdateAlertConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string
		var alertUUID string

		resp, httpRes, err := apiClient.ProvidersApi.ConnectwiseUpdateAlertConfiguration(context.Background(), providerId, alertUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ConnectwiseUpdateConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.ConnectwiseUpdateConfiguration(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService MtpIntegrationRetrieveAlerts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.MtpIntegrationRetrieveAlerts(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService MtpIntegrationRetrieveSyncErrors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string
		var integrationType string

		resp, httpRes, err := apiClient.ProvidersApi.MtpIntegrationRetrieveSyncErrors(context.Background(), uUID, integrationType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService PolicyGroupTemplatesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string
		var id string

		resp, httpRes, err := apiClient.ProvidersApi.PolicyGroupTemplatesGet(context.Background(), providerId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService PolicyGroupTemplatesGetConfiguredPolicyTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string
		var id string

		resp, httpRes, err := apiClient.ProvidersApi.PolicyGroupTemplatesGetConfiguredPolicyTemplate(context.Background(), providerId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService PolicyGroupTemplatesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.PolicyGroupTemplatesList(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService PolicyGroupTemplatesListConfiguredPolicyTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.PolicyGroupTemplatesListConfiguredPolicyTemplates(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService PolicyGroupTemplatesListMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string
		var id string

		resp, httpRes, err := apiClient.ProvidersApi.PolicyGroupTemplatesListMembers(context.Background(), providerId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ProviderOrganizationsCreateOrg", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.ProviderOrganizationsCreateOrg(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ProviderOrganizationsUpdateOrg", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string
		var id string

		resp, httpRes, err := apiClient.ProvidersApi.ProviderOrganizationsUpdateOrg(context.Background(), providerId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ProvidersGetProvider", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.ProvidersGetProvider(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ProvidersListAdministrators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.ProvidersListAdministrators(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ProvidersListOrganizations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.ProvidersListOrganizations(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ProvidersPostAdmins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.ProvidersPostAdmins(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ProvidersRemoveAdministrator", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string
		var id string

		httpRes, err := apiClient.ProvidersApi.ProvidersRemoveAdministrator(context.Background(), providerId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ProvidersRetrieveIntegrations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.ProvidersRetrieveIntegrations(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ProvidersRetrieveInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string
		var iD string

		resp, httpRes, err := apiClient.ProvidersApi.ProvidersRetrieveInvoice(context.Background(), providerId, iD).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService ProvidersRetrieveInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.ProvidersRetrieveInvoices(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService SyncroCreateConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.SyncroCreateConfiguration(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService SyncroDeleteConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		httpRes, err := apiClient.ProvidersApi.SyncroDeleteConfiguration(context.Background(), uUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService SyncroGetConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.SyncroGetConfiguration(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService SyncroPatchMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.SyncroPatchMappings(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService SyncroPatchSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.SyncroPatchSettings(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService SyncroRetrieveAllAlertConfigurationOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.SyncroRetrieveAllAlertConfigurationOptions(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService SyncroRetrieveAllAlertConfigurations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string

		resp, httpRes, err := apiClient.ProvidersApi.SyncroRetrieveAllAlertConfigurations(context.Background(), providerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService SyncroRetrieveBillingMappingConfigurationOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.SyncroRetrieveBillingMappingConfigurationOptions(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService SyncroRetrieveCompanies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.SyncroRetrieveCompanies(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService SyncroRetrieveMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.SyncroRetrieveMappings(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService SyncroRetrieveSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.SyncroRetrieveSettings(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService SyncroUpdateAlertConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var providerId string
		var alertUUID string

		resp, httpRes, err := apiClient.ProvidersApi.SyncroUpdateAlertConfiguration(context.Background(), providerId, alertUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvidersApiService SyncroUpdateConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uUID string

		resp, httpRes, err := apiClient.ProvidersApi.SyncroUpdateConfiguration(context.Background(), uUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
